SET GLOBAL event_scheduler = ON;
/*Actualizar vigencia*/
DROP PROCEDURE IF EXISTS verificar_vigencia; 
DROP TRIGGER IF EXISTS nuevo_catalogo;   
DELIMITER //
CREATE PROCEDURE verificar_vigencia()
	BEGIN
		UPDATE Catalogos SET VIGENTE=false
        WHERE VALIDO_HASTA < CURRENT_DATE();
    END//
    
DROP EVENT IF EXISTS actualizar_vigencia;
CREATE EVENT actualizar_vigencia
ON SCHEDULE EVERY 1 DAY
STARTS '2022-06-06 00:00:00'
DO 
	CALL verificar_vigencia();

DELIMITER //
CREATE TRIGGER nuevo_catalogo
	BEFORE INSERT ON Catalogos FOR EACH ROW
    BEGIN
		IF NEW.VALIDO_HASTA < current_date() THEN
			SET NEW.VIGENTE = FALSE;
		ELSE
			SET NEW.VIGENTE = TRUE;
		END IF;
    END//
/*END - Actualizar vigencia*/
/* Obtener Catalogos*/
DELIMITER //
DROP PROCEDURE IF EXISTS catalogos_farmacia;
CREATE PROCEDURE catalogos_farmacia(IN RUT VARCHAR(13))
	BEGIN
		SELECT c.NOMBRE,c.FECHA_CARGA,c.VALIDO_DESDE,c.VALIDO_HASTA FROM Catalogos c JOIN Farmacias f ON c.FARMACIA_ID = f.ID
        WHERE f.RUT = RUT AND c.FECHA_CARGA < DATE_ADD(NOW(), INTERVAL -3 MONTH);
    END//
/* Añadir Producto*/
DROP TRIGGER IF EXISTS nuevo_producto;
DELIMITER //
CREATE TRIGGER nuevo_producto
	AFTER INSERT ON catalogo_producto FOR EACH ROW
    BEGIN
		INSERT IGNORE INTO producto(ID,NOMBRE) VALUES(NEW.PRODUCTO_ID,NEW.DESCRIPCION);
    END//
/* Obtener detalles Producto */
DROP PROCEDURE IF EXISTS detalle_producto;
DELIMITER //
CREATE PROCEDURE detalle_producto(ID VARCHAR(20))
BEGIN
	SET @TIPO = (SELECT p.TIPO FROM Producto p WHERE p.ID = ID);
	IF(@TIPO = 0) THEN
		SELECT p.*, m.PRINCIPIO_ACTIVO,m.TIPO_VENTA FROM Producto p JOIN Medicamento m on p.ID = m.ID WHERE p.ID = ID;
    END IF;
END//


/* Obtener estadisticas de la farmacia */
DROP PROCEDURE IF EXISTS STATS;
DELIMITER //
CREATE PROCEDURE STATS(IN RUT VARCHAR(13))
BEGIN
	SET @USER = (SELECT ID FROM Farmacias f WHERE f.RUT = RUT);
	SET @PEDIDOS = (SELECT COUNT(*) FROM Ordenes WHERE FARMACIA_ID = 2 AND ESTADO NOT IN(-1,2)); 
    SET @TOTAL = (SELECT IFNULL(ROUND(SUM(o.GRANDTOTAL),2),0) FROM  Ordenes o JOIN Farmacias f ON o.FARMACIA_ID = f.ID WHERE f.ID = @USER);
    SET @NDROGUERIAS = (SELECT COUNT(DISTINCT c.NOMBRE) FROM Catalogos c WHERE c.FARMACIA_ID = @USER AND c.FECHA_CARGA >= DATE_ADD(NOW(), INTERVAL -3 MONTH) );

	SELECT @PEDIDOS AS PEDIDOS, @TOTAL AS TOTAL_GASTADO,@NDROGUERIAS AS DROGUERIAS_ASOCIADAS;

	SELECT op.PRODUCTO_ID,COUNT(op.PRODUCTO_ID) AS COUNT,p.NOMBRE AS NOMBRE, IFNULL(m.TIPO_VENTA,'N/A') AS VENTA, SUM(op.CANTIDAD) AS CANTIDAD, MAX(o.FECHA_CREACION) AS ULTIMA
	FROM Ordenes o
	JOIN Orden_Producto op ON o.ID = op.ORDER_ID
	LEFT JOIN Producto p ON op.PRODUCTO_ID = p.ID
	LEFT JOIN Medicamento m ON p.ID = m.ID
	WHERE o.FARMACIA_ID = @USER
	GROUP BY op.PRODUCTO_ID
	ORDER BY COUNT DESC
	LIMIT 15;
END//

/*Añadir IVA*/
DELIMITER //
CREATE FUNCTION CalcTOTAL ( total DECIMAL)
RETURNS DECIMAL(15,2)
BEGIN
   SET @IVA = 0.19;
   RETURN total * (1+@IVA);
END; //

/*Nueva orden de compra*/
DROP TRIGGER IF EXISTS nueva_orden;
DELIMITER //
CREATE TRIGGER nueva_orden
	BEFORE INSERT ON Ordenes FOR EACH ROW
    BEGIN
		SET NEW.GRANDTOTAL = CalcTOTAL(NEW.GRANDTOTAL);
    END//

/*Nueva compra*/
DROP TRIGGER IF EXISTS nueva_compra;
DELIMITER //
CREATE TRIGGER nueva_compra
	BEFORE INSERT ON Compra FOR EACH ROW
    BEGIN
		SET NEW.TOTAL = CalcTOTAL(NEW.TOTAL);
    END//